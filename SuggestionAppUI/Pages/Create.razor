@page "/create"
@using SuggestionAppUI.Models


@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject IUserData userData
@attribute [Authorize]

<h1>Make A Suggestion</h1>
<div>
    <div>
        <div >
            <button @onclick="ClosePage">x</button>
        </div>
        @if(categories is not null)
        {
            
        }
        <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div>
                <label for="suggestion-text">Suggestion</label>
                <div>Focus on the topic or technology you want to learn about</div>
                <InputText id="suggestion-text" @bind-Value="suggestion.Suggestion"></InputText>
            </div>
            <div>
                <label for="category">Category</label>
                <div>Choose One Category</div>
                <div>
                    <MyInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                        @foreach(var c in categories)
                        {
                            <div>
                                <InputRadio Value="c.Id" id="c.Id"></InputRadio>
                                <label for="c.Id" >@c.CategoryName - @c.CategoryDescription</label>
                            </div>
                        }
                    </MyInputRadioGroup>
                </div>
            </div>

              <div>
                <label for="Description">Description</label>
                <div>Briefly describe your suggestion</div>
                <InputTextArea id="Description" @bind-Value="suggestion.Description"></InputTextArea>
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateSuggestionModel suggestion = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();

        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateSuggestion()
    {
        SuggestionModel suggestionModel = new SuggestionModel();
        suggestionModel.Suggestion = suggestion.Suggestion;
        suggestionModel.Description = suggestion.Description;
        suggestionModel.Author = new BasicUserModel(loggedInUser);
        suggestionModel.Category = categories.Where(c => c.Id == suggestion.CategoryId).FirstOrDefault();


        if(suggestionModel.Category is null)
        {
            suggestion.CategoryId= "";
            return;
        }
        await suggestionData.CreateSuggestion(suggestionModel);
        suggestion = new();
        ClosePage();
    }
}
