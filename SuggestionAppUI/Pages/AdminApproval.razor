@page "/AdminApproval"
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>Pending Submissions</h1>
<div>
    <div>@submissions?.Count submissions</div>
    <div>
        <button @onclick="ClosePage">x</button>
    </div>
</div>
@if(submissions is not null)
{
    @foreach(var s in submissions){
         <div>
        <div>
            <button @onclick="(()=>ApproveSubmission(s))">Approve</button>
             <button @onclick="(()=>RejectSubmission(s))">Reject</button>
        </div>
        <div>
            <div>
                @if(currentEditingTitle ==s.Id)
                    {
                        <EditForm Model="editedTitle" OnSubmit="(()=>SaveTitle(s))">
                            <InputText @bind-Value="editedTitle " />
                            <button type="submit">
                                <span class="oi oi-check" title="Save" aria-hidden="true"></span>
                            </button>
                             <button @onclick="(()=>currentEditingTitle=string.Empty)">
                                <span class="oi oi-x" title="Save" aria-hidden="true"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Suggestion
                        <span class=" oi oi-pencil" @onclick="(()=>EditTitle(s))"></span>
                    }
                </div>
        </div>
    </div>
    }
   
}

@code {
    private List<SuggestionModel> submissions;
    private SuggestionModel editingModel;
    private string currentEditingTitle = "";
    private string currentEditingDescription = "";
    private string editedTitle = "";
    private string editedDescription = "";

    protected override async Task OnInitializedAsync()
    {
        submissions = await suggestionData.GetAllSuggestionsWaitingForApproval();
    }
    private async Task ApproveSubmission(SuggestionModel submission)
    {
        submission.ApprovedForRelease = true;
        submissions.Remove(submission);
        await suggestionData.UpdateSuggestion(submission);

    }
    private async Task RejectSubmission(SuggestionModel submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);
        await suggestionData.UpdateSuggestion(submission);
    }


    private void EditTitle(SuggestionModel suggestion)
    {
        editingModel = suggestion;
        editedTitle = suggestion.Suggestion;
        currentEditingTitle = suggestion.Id;
        currentEditingDescription = "";
    }
    private async Task SaveTitle(SuggestionModel model)
    {
        currentEditingTitle = string.Empty;
        model.Suggestion = editedTitle;
        await suggestionData.UpdateSuggestion(model);
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

}
