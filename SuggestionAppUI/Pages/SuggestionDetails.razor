@page "/Details/{id}"
@inject NavigationManager navManager
@inject ISuggestionData suggestionData
@inject AuthenticationStateProvider authProvider
@inject IUserData userData


<h1>Suggestion Details</h1>
<div>
    <div>
        @if(suggestion is not null)
        {
            <div>
                <div>
                    <div @onclick="VoteUp">
                         <div>@GetUpVoteTopText()</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpVotebottomText()</div>
                    </div>
                    <div>
                        <div>@suggestion.DateCreated.ToString("MM.dd.yyyy")</div>
                    </div>
                </div>
                <div>
                    <div>@suggestion.Suggestion</div>
                    <div>@suggestion.Author.DisplayName</div>
                    <div>@suggestion.Description</div>
                    <div>@suggestion.Category.CategoryName</div>
                </div>
               <div>
                   <button @onclick="ClosePage">x</button>
               </div>

            </div>
        }
    </div>
</div>
@if(suggestion?.SuggestionStatus is not null)
{
    <div>
      <div>
           <div></div>
           <div>
                <div>
                    @suggestion.SuggestionStatus.StatusName
                </div>
                <div>
                    @((MarkupString)suggestion.OwnerNotes)
                </div>
           </div>
      </div>

</div>
}

@code {
    [Parameter]
    public string Id{ get; set; }

    private SuggestionModel suggestion;
    private UserModel loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        suggestion = await suggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(userData);
    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
      private string GetUpVoteTopText()
    {
        if(suggestion.UserVotes?.Count>0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
           if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }
    private string GetUpVotebottomText()
    {
        if (suggestion.UserVotes?.Count>1)
        {
            return "Upvotes";
        }
        else
        {
            return "upvote";
        }
    }
     private async Task VoteUp()
    {
        if(loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                return;
            }
            if (suggestion.UserVotes.Add(loggedInUser.Id)==false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpVoteSuggestion(suggestion.Id, loggedInUser.Id) ;           
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);          
        }

    }

}
