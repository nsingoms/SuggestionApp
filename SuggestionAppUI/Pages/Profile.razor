@page "/Profile"

@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>My Profile</h1>
<div>
   <div>
       <button @onclick="ClosePage">x</button>
   </div>
</div>
<div>
    <h2>My Account</h2>
    <p>
        <a href="#">
            Edit my Profile
            </a>
            </p>
</div>
@if(approved?.Count>0)
{
     <div>
        <h2>Approved Suggestions</h2>
        <p>These are your suggestions that are currently active</p>

        @foreach(var s in approved)
        {
            
           <hr />
           <div>
                @s.Suggestion
           </div>
           <p>@s.DateCreated.ToString("MM.dd.yyyyy")</p>
           <p>Total Votes : @s.UserVotes.Count</p>
           <p>@s.Category.CategoryName</p>
           <p>@s.Description</p>
                @if(s.SuggestionStatus is not null)
                {
                    <div>
                       @s.SuggestionStatus.StatusName
                    </div>
                    <p> @((MarkupString)s.OwnerNotes) </p>
                }
    
        }
</div>
}
@if(archived?.Count>0)
{
     <div>
        <h2>Archived Suggestions</h2>
        <p>These are your suggestions that are currently active</p>

        @foreach(var s in archived)
        {
              <hr />
        <div>
            @s.Suggestion
        </div>
        <p>@s.DateCreated.ToString("MM.dd.yyyyy")</p>
       <p>Total Votes : @s.UserVotes.Count</p>
       <p>@s.Category.CategoryName</p>
       <p>@s.Description</p>
            @if(s.SuggestionStatus is not null)
            {
                <div>
                   @s.SuggestionStatus.StatusName
                </div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }

     
        }
</div>
}
@if(pending?.Count>0)
{
     <div>
        <h2>Pending Suggestions</h2>
        <p>These are your suggestions that are currently active</p>

        @foreach(var s in pending)
        {
              <hr />
        <div>
            @s.Suggestion
        </div>
        <p>@s.DateCreated.ToString("MM.dd.yyyyy")</p>
       <p>Total Votes : @s.UserVotes.Count</p>
       <p>@s.Category.CategoryName</p>
       <p>@s.Description</p>
            @if(s.SuggestionStatus is not null)
            {
                <div>
                   @s.SuggestionStatus.StatusName
                </div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }

     
        }
</div>
}
@if(rejected?.Count>0)
{
     <div>
        <h2>Rejected Suggestions</h2>
        <p>These are your suggestions that are currently active</p>

        @foreach(var s in rejected)
        {
              <hr />
        <div>
            @s.Suggestion
        </div>
        <p>@s.DateCreated.ToString("MM.dd.yyyyy")</p>
       <p>Total Votes : @s.UserVotes.Count</p>
       <p>@s.Category.CategoryName</p>
       <p>@s.Description</p>
            @if(s.SuggestionStatus is not null)
            {
                <div>
                   @s.SuggestionStatus.StatusName
                </div>
                <p>@((MarkupString)s.OwnerNotes)</p>
            }

     
        }
</div>
}


@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        //TODO : Replace with user lookup
        loggedInUser = await userData.GetUserFromAuthentication("abc-123");

        var results = await suggestionData.GetUserSuggestions(loggedInUser.Id);

        if(loggedInUser is not null && results is not null)
        {
            submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            approved = results.Where(x => x.ApprovedForRelease && x.Archived == false & x.Rejected== false).ToList();
            archived = results.Where(x => x.Archived && x.Rejected == false).ToList();
            pending = results.Where(x => x.ApprovedForRelease == false && x.Rejected == false).ToList();
            rejected = results.Where(x => x.Rejected == true).ToList();
        }

    }
    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
